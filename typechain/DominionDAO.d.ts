/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DominionDAOInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "contribute()": FunctionFragment;
    "createProposal(string,string,address,uint256)": FunctionFragment;
    "daoBalance()": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getContributorBalance()": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "getProposals()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getStakeholderBalance()": FunctionFragment;
    "getStakeholderVotes()": FunctionFragment;
    "getVotesOf(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isContributor()": FunctionFragment;
    "isStakeholder()": FunctionFragment;
    "payBeneficiary(uint256)": FunctionFragment;
    "performVote(uint256,bool)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "daoBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContributorBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeholderBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeholderVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotesOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isContributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isStakeholder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payBeneficiary",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "performVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContributorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeholderBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeholderVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotesOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStakeholder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "Action(address,bytes32,string,address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Action"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type ActionEvent = TypedEvent<
  [string, string, string, string, BigNumber] & {
    initiator: string;
    role: string;
    message: string;
    beneficiary: string;
    amount: BigNumber;
  }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export class DominionDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DominionDAOInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    contribute(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createProposal(
      title: string,
      description: string,
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daoBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContributorBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          boolean,
          boolean,
          string,
          string,
          string
        ] & {
          id: BigNumber;
          amount: BigNumber;
          duration: BigNumber;
          upvotes: BigNumber;
          downvotes: BigNumber;
          title: string;
          description: string;
          passed: boolean;
          paid: boolean;
          beneficiary: string;
          proposer: string;
          executor: string;
        }
      ]
    >;

    getProposals(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          boolean,
          boolean,
          string,
          string,
          string
        ] & {
          id: BigNumber;
          amount: BigNumber;
          duration: BigNumber;
          upvotes: BigNumber;
          downvotes: BigNumber;
          title: string;
          description: string;
          passed: boolean;
          paid: boolean;
          beneficiary: string;
          proposer: string;
          executor: string;
        })[]
      ] & {
        props: ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          boolean,
          boolean,
          string,
          string,
          string
        ] & {
          id: BigNumber;
          amount: BigNumber;
          duration: BigNumber;
          upvotes: BigNumber;
          downvotes: BigNumber;
          title: string;
          description: string;
          passed: boolean;
          paid: boolean;
          beneficiary: string;
          proposer: string;
          executor: string;
        })[];
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getStakeholderBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakeholderVotes(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getVotesOf(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, boolean] & {
          voter: string;
          timestamp: BigNumber;
          choosen: boolean;
        })[]
      ]
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isContributor(overrides?: CallOverrides): Promise<[boolean]>;

    isStakeholder(overrides?: CallOverrides): Promise<[boolean]>;

    payBeneficiary(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    performVote(
      proposalId: BigNumberish,
      choosen: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  contribute(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createProposal(
    title: string,
    description: string,
    beneficiary: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daoBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getContributorBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getProposal(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      boolean,
      string,
      string,
      string
    ] & {
      id: BigNumber;
      amount: BigNumber;
      duration: BigNumber;
      upvotes: BigNumber;
      downvotes: BigNumber;
      title: string;
      description: string;
      passed: boolean;
      paid: boolean;
      beneficiary: string;
      proposer: string;
      executor: string;
    }
  >;

  getProposals(
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      boolean,
      string,
      string,
      string
    ] & {
      id: BigNumber;
      amount: BigNumber;
      duration: BigNumber;
      upvotes: BigNumber;
      downvotes: BigNumber;
      title: string;
      description: string;
      passed: boolean;
      paid: boolean;
      beneficiary: string;
      proposer: string;
      executor: string;
    })[]
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getStakeholderBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getStakeholderVotes(overrides?: CallOverrides): Promise<BigNumber[]>;

  getVotesOf(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, boolean] & {
      voter: string;
      timestamp: BigNumber;
      choosen: boolean;
    })[]
  >;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isContributor(overrides?: CallOverrides): Promise<boolean>;

  isStakeholder(overrides?: CallOverrides): Promise<boolean>;

  payBeneficiary(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  performVote(
    proposalId: BigNumberish,
    choosen: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    contribute(overrides?: CallOverrides): Promise<BigNumber>;

    createProposal(
      title: string,
      description: string,
      beneficiary: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        boolean,
        string,
        string,
        string
      ] & {
        id: BigNumber;
        amount: BigNumber;
        duration: BigNumber;
        upvotes: BigNumber;
        downvotes: BigNumber;
        title: string;
        description: string;
        passed: boolean;
        paid: boolean;
        beneficiary: string;
        proposer: string;
        executor: string;
      }
    >;

    daoBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContributorBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        boolean,
        string,
        string,
        string
      ] & {
        id: BigNumber;
        amount: BigNumber;
        duration: BigNumber;
        upvotes: BigNumber;
        downvotes: BigNumber;
        title: string;
        description: string;
        passed: boolean;
        paid: boolean;
        beneficiary: string;
        proposer: string;
        executor: string;
      }
    >;

    getProposals(
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        boolean,
        string,
        string,
        string
      ] & {
        id: BigNumber;
        amount: BigNumber;
        duration: BigNumber;
        upvotes: BigNumber;
        downvotes: BigNumber;
        title: string;
        description: string;
        passed: boolean;
        paid: boolean;
        beneficiary: string;
        proposer: string;
        executor: string;
      })[]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getStakeholderBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeholderVotes(overrides?: CallOverrides): Promise<BigNumber[]>;

    getVotesOf(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, boolean] & {
        voter: string;
        timestamp: BigNumber;
        choosen: boolean;
      })[]
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isContributor(overrides?: CallOverrides): Promise<boolean>;

    isStakeholder(overrides?: CallOverrides): Promise<boolean>;

    payBeneficiary(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performVote(
      proposalId: BigNumberish,
      choosen: boolean,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        voter: string;
        timestamp: BigNumber;
        choosen: boolean;
      }
    >;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Action(address,bytes32,string,address,uint256)"(
      initiator?: string | null,
      role?: null,
      message?: null,
      beneficiary?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        initiator: string;
        role: string;
        message: string;
        beneficiary: string;
        amount: BigNumber;
      }
    >;

    Action(
      initiator?: string | null,
      role?: null,
      message?: null,
      beneficiary?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        initiator: string;
        role: string;
        message: string;
        beneficiary: string;
        amount: BigNumber;
      }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    contribute(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createProposal(
      title: string,
      description: string,
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daoBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContributorBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposals(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeholderBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeholderVotes(overrides?: CallOverrides): Promise<BigNumber>;

    getVotesOf(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContributor(overrides?: CallOverrides): Promise<BigNumber>;

    isStakeholder(overrides?: CallOverrides): Promise<BigNumber>;

    payBeneficiary(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    performVote(
      proposalId: BigNumberish,
      choosen: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contribute(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createProposal(
      title: string,
      description: string,
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daoBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContributorBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeholderBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeholderVotes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotesOf(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStakeholder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payBeneficiary(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    performVote(
      proposalId: BigNumberish,
      choosen: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
